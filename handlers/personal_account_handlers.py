from aiogram import F, Router
from aiogram.filters import StateFilter
from aiogram.types import CallbackQuery, Message, FSInputFile
from FSM import StateMenu, StateAccount, StateInformation
from keyboard import (keyboard_personal_account, keyboard_main_menu,
                    add_button_purchas_info, keyboard_inform_menu)
from database import DataBase, LEXICON



router = Router()

@router.message(F.text == '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç ‚ñ∂Ô∏è', StateFilter(StateMenu.waiting_for_menu_access))
@router.message(F.text == '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç ‚ñ∂Ô∏è', StateFilter(StateMenu.waiting_for_card_operations))
async def command_menu_process(message: Message, state: StateMenu):
    await message.answer(text=LEXICON['menu'], reply_markup=keyboard_personal_account)
    await state.set_state(StateAccount.waiting_for_menu_account)


@router.message(F.text == '–ü–æ–∫—É–ø–∫–∏', StateFilter(StateAccount.waiting_for_menu_account))
async def command_purchase_history(message: Message, state: StateAccount):
    data = await state.get_data()
    contact_number = data.get('contact_number')
    purchases = DataBase[contact_number]['purchases']

    if not purchases:
        await message.answer(text=LEXICON['–ù–µ—Ç –ø–æ–∫—É–ø–æ–∫'])
    else:
        for purchas in purchases:

            await message.answer(
                             f"–ù–æ–º–µ—Ä: {purchas['–ù–æ–º–µ—Ä']}\n"
                             f"–î–∞—Ç–∞: {purchas['–î–∞—Ç–∞']}\n"
                             f"–ú–∞–≥–∞–∑–∏–Ω: {purchas['–ú–∞–≥–∞–∑–∏–Ω']}\n"
                             f"–°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏: {purchas['–°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏']} ‚ÇΩ\n"
                             f"–°–∫–∏–¥–∫–∞ %: {purchas['–°–∫–∏–¥–∫–∞ %']}\n"
                             f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {purchas['–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ']} ‚ÇΩ",
                             reply_markup=await add_button_purchas_info('–ü–æ–¥—Ä–æ–±–Ω–µ–µ', purchas['–ù–æ–º–µ—Ä']))


@router.callback_query(F.data.startswith('purchase_'))
async def process_purchases_info(callback: CallbackQuery, state: StateAccount):
    purchase_number, text = callback.data.split("_")[1:]
    data = await state.get_data()
    contact_number = data.get('contact_number')
    result = ''

    for purchase_info in DataBase[contact_number]['purchases']:

        if str(purchase_info['–ù–æ–º–µ—Ä']) == purchase_number:

            if text == '–ü–æ–¥—Ä–æ–±–Ω–µ–µ':

                for dict_product in purchase_info['–¢–æ–≤–∞—Ä—ã']:
                    for product, value in dict_product.items():
                        result += product
                        for key, values in value.items():
                            result += f'{key}: {values}\n'

                await callback.message.edit_text(
                f"–ù–æ–º–µ—Ä: {purchase_info['–ù–æ–º–µ—Ä']}\n"
                f"–î–∞—Ç–∞: {purchase_info['–î–∞—Ç–∞']}\n"
                f"–ú–∞–≥–∞–∑–∏–Ω: {purchase_info['–ú–∞–≥–∞–∑–∏–Ω']}\n"
                f"–û–ø–µ—Ä–∞—Ü–∏—è: {purchase_info['–û–ø–µ—Ä–∞—Ü–∏—è']}\n"
                f"–¢–æ–≤–∞—Ä—ã: {result}"
                f"–°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏: {purchase_info['–°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏']} ‚ÇΩ\n"
                f"–°–∫–∏–¥–∫–∞ %: {purchase_info['–°–∫–∏–¥–∫–∞ %']}%\n"
                f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {purchase_info['–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ']} ‚ÇΩ",
                reply_markup=await add_button_purchas_info('–ö—Ä–∞—Ç–∫–æ', purchase_info['–ù–æ–º–µ—Ä']))

                break

            else:
                await callback.message.edit_text(
                f"–ù–æ–º–µ—Ä: {purchase_info['–ù–æ–º–µ—Ä']}\n"
                f"–î–∞—Ç–∞: {purchase_info['–î–∞—Ç–∞']}\n"
                f"–ú–∞–≥–∞–∑–∏–Ω: {purchase_info['–ú–∞–≥–∞–∑–∏–Ω']}\n"
                f"–°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏: {purchase_info['–°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏']} ‚ÇΩ\n"
                f"–°–∫–∏–¥–∫–∞ %: {purchase_info['–°–∫–∏–¥–∫–∞ %']}%\n"
                f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {purchase_info['–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ']} ‚ÇΩ",
                reply_markup=await add_button_purchas_info('–ü–æ–¥—Ä–æ–±–Ω–µ–µ', purchase_info['–ù–æ–º–µ—Ä']))

                break

    await callback.answer()


@router.message(F.text == '–ü—Ä–∏–≤–µ–¥–∏ –¥—Ä—É–≥–∞', StateFilter(StateAccount.waiting_for_menu_account))
async def command_bring_friend(message: Message, state: StateAccount):
    await message.answer_photo(
        photo=FSInputFile('photo_2024-12-10_21-02-01.jpg'),
        caption=f'–ü–æ–¥–µ–ª–∏—Å—å —ç—Ç–∏–º QR-–∫–æ–¥–æ–º —Å –¥—Ä—É–≥–æ–º üòé\n\n'
                f'200 –±–∞–ª–ª–æ–≤ –≤–∞–º –±—É–¥—É—Ç –Ω–∞—á–∏—Å–ª–µ–Ω—ã –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–∏ –≤–∞—à–µ–≥–æ –¥—Ä—É–≥–∞ –≤ –æ–¥–Ω–æ–º –∏–∑ —Å–µ—Ç–∏ –Ω–∞—à–∏—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤')


@router.message(F.text == '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚ñ∂Ô∏è', StateFilter(StateAccount.waiting_for_menu_account))
async def command_menu_information(message: Message, state: StateAccount):
    await message.answer(text=LEXICON['menu'], reply_markup=keyboard_inform_menu)
    await state.set_state(StateInformation.waiting_for_menu_information)


@router.message(F.text == '‚óÄÔ∏è –ù–∞–∑–∞–¥', StateFilter(StateAccount.waiting_for_menu_account))
async def command_menu_information(message: Message, state: StateAccount):
    await message.answer(text=LEXICON['menu'], reply_markup=keyboard_main_menu)
    await state.set_state(StateMenu.waiting_for_menu_access)
